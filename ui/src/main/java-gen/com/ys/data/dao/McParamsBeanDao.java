package com.ys.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ys.data.bean.McParamsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table mcparams.
*/
public class McParamsBeanDao extends AbstractDao<McParamsBean, Long> {

    public static final String TABLENAME = "mcparams";

    /**
     * Properties of entity McParamsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Mp_id = new Property(0, Long.class, "mp_id", true, "MP_ID");
        public final static Property P_code = new Property(1, String.class, "p_code", false, "P_CODE");
        public final static Property Mcp_pvalue = new Property(2, String.class, "mcp_pvalue", false, "MCP_PVALUE");
    };


    public McParamsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public McParamsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'mcparams' (" + //
                "'MP_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: mp_id
                "'P_CODE' TEXT," + // 1: p_code
                "'MCP_PVALUE' TEXT);"); // 2: mcp_pvalue
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'mcparams'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, McParamsBean entity) {
        stmt.clearBindings();
 
        Long mp_id = entity.getMp_id();
        if (mp_id != null) {
            stmt.bindLong(1, mp_id);
        }
 
        String p_code = entity.getP_code();
        if (p_code != null) {
            stmt.bindString(2, p_code);
        }
 
        String mcp_pvalue = entity.getMcp_pvalue();
        if (mcp_pvalue != null) {
            stmt.bindString(3, mcp_pvalue);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public McParamsBean readEntity(Cursor cursor, int offset) {
        McParamsBean entity = new McParamsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mp_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // p_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // mcp_pvalue
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, McParamsBean entity, int offset) {
        entity.setMp_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setP_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMcp_pvalue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(McParamsBean entity, long rowId) {
        entity.setMp_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(McParamsBean entity) {
        if(entity != null) {
            return entity.getMp_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
