package com.ys.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ys.data.bean.PromotionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table promotion.
*/
public class PromotionBeanDao extends AbstractDao<PromotionBean, Long> {

    public static final String TABLENAME = "promotion";

    /**
     * Properties of entity PromotionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Pt_id = new Property(0, Long.class, "pt_id", true, "PT_ID");
        public final static Property Pt_name = new Property(1, String.class, "pt_name", false, "PT_NAME");
        public final static Property Pt_msg = new Property(2, String.class, "pt_msg", false, "PT_MSG");
        public final static Property Pt_desc = new Property(3, String.class, "pt_desc", false, "PT_DESC");
        public final static Property Pt_status = new Property(4, String.class, "pt_status", false, "PT_STATUS");
        public final static Property Pt_starttime = new Property(5, java.util.Date.class, "pt_starttime", false, "PT_STARTTIME");
        public final static Property Pt_endtime = new Property(6, java.util.Date.class, "pt_endtime", false, "PT_ENDTIME");
        public final static Property Pt_range = new Property(7, String.class, "pt_range", false, "PT_RANGE");
        public final static Property Pt_rangeparam = new Property(8, String.class, "pt_rangeparam", false, "PT_RANGEPARAM");
        public final static Property Pt_goods = new Property(9, String.class, "pt_goods", false, "PT_GOODS");
        public final static Property Pt_goodsparam = new Property(10, String.class, "pt_goodsparam", false, "PT_GOODSPARAM");
        public final static Property Pt_condition = new Property(11, String.class, "pt_condition", false, "PT_CONDITION");
        public final static Property Pt_conditionparam = new Property(12, String.class, "pt_conditionparam", false, "PT_CONDITIONPARAM");
        public final static Property Pt_type = new Property(13, String.class, "pt_type", false, "PT_TYPE");
        public final static Property Pt_typeparam = new Property(14, String.class, "pt_typeparam", false, "PT_TYPEPARAM");
        public final static Property Remark = new Property(15, String.class, "remark", false, "REMARK");
        public final static Property Addtime = new Property(16, String.class, "addtime", false, "ADDTIME");
        public final static Property Updatetime = new Property(17, String.class, "updatetime", false, "UPDATETIME");
    };


    public PromotionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PromotionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'promotion' (" + //
                "'PT_ID' INTEGER PRIMARY KEY ," + // 0: pt_id
                "'PT_NAME' TEXT," + // 1: pt_name
                "'PT_MSG' TEXT," + // 2: pt_msg
                "'PT_DESC' TEXT," + // 3: pt_desc
                "'PT_STATUS' TEXT," + // 4: pt_status
                "'PT_STARTTIME' INTEGER," + // 5: pt_starttime
                "'PT_ENDTIME' INTEGER," + // 6: pt_endtime
                "'PT_RANGE' TEXT," + // 7: pt_range
                "'PT_RANGEPARAM' TEXT," + // 8: pt_rangeparam
                "'PT_GOODS' TEXT," + // 9: pt_goods
                "'PT_GOODSPARAM' TEXT," + // 10: pt_goodsparam
                "'PT_CONDITION' TEXT," + // 11: pt_condition
                "'PT_CONDITIONPARAM' TEXT," + // 12: pt_conditionparam
                "'PT_TYPE' TEXT," + // 13: pt_type
                "'PT_TYPEPARAM' TEXT," + // 14: pt_typeparam
                "'REMARK' TEXT," + // 15: remark
                "'ADDTIME' TEXT," + // 16: addtime
                "'UPDATETIME' TEXT);"); // 17: updatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'promotion'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PromotionBean entity) {
        stmt.clearBindings();
 
        Long pt_id = entity.getPt_id();
        if (pt_id != null) {
            stmt.bindLong(1, pt_id);
        }
 
        String pt_name = entity.getPt_name();
        if (pt_name != null) {
            stmt.bindString(2, pt_name);
        }
 
        String pt_msg = entity.getPt_msg();
        if (pt_msg != null) {
            stmt.bindString(3, pt_msg);
        }
 
        String pt_desc = entity.getPt_desc();
        if (pt_desc != null) {
            stmt.bindString(4, pt_desc);
        }
 
        String pt_status = entity.getPt_status();
        if (pt_status != null) {
            stmt.bindString(5, pt_status);
        }
 
        java.util.Date pt_starttime = entity.getPt_starttime();
        if (pt_starttime != null) {
            stmt.bindLong(6, pt_starttime.getTime());
        }
 
        java.util.Date pt_endtime = entity.getPt_endtime();
        if (pt_endtime != null) {
            stmt.bindLong(7, pt_endtime.getTime());
        }
 
        String pt_range = entity.getPt_range();
        if (pt_range != null) {
            stmt.bindString(8, pt_range);
        }
 
        String pt_rangeparam = entity.getPt_rangeparam();
        if (pt_rangeparam != null) {
            stmt.bindString(9, pt_rangeparam);
        }
 
        String pt_goods = entity.getPt_goods();
        if (pt_goods != null) {
            stmt.bindString(10, pt_goods);
        }
 
        String pt_goodsparam = entity.getPt_goodsparam();
        if (pt_goodsparam != null) {
            stmt.bindString(11, pt_goodsparam);
        }
 
        String pt_condition = entity.getPt_condition();
        if (pt_condition != null) {
            stmt.bindString(12, pt_condition);
        }
 
        String pt_conditionparam = entity.getPt_conditionparam();
        if (pt_conditionparam != null) {
            stmt.bindString(13, pt_conditionparam);
        }
 
        String pt_type = entity.getPt_type();
        if (pt_type != null) {
            stmt.bindString(14, pt_type);
        }
 
        String pt_typeparam = entity.getPt_typeparam();
        if (pt_typeparam != null) {
            stmt.bindString(15, pt_typeparam);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(16, remark);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(17, addtime);
        }
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(18, updatetime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PromotionBean readEntity(Cursor cursor, int offset) {
        PromotionBean entity = new PromotionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pt_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pt_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pt_msg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pt_desc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pt_status
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // pt_starttime
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // pt_endtime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pt_range
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pt_rangeparam
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pt_goods
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pt_goodsparam
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pt_condition
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pt_conditionparam
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pt_type
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pt_typeparam
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // remark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // addtime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // updatetime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PromotionBean entity, int offset) {
        entity.setPt_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPt_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPt_msg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPt_desc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPt_status(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPt_starttime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setPt_endtime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setPt_range(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPt_rangeparam(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPt_goods(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPt_goodsparam(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPt_condition(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPt_conditionparam(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPt_type(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPt_typeparam(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAddtime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUpdatetime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PromotionBean entity, long rowId) {
        entity.setPt_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PromotionBean entity) {
        if(entity != null) {
            return entity.getPt_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
